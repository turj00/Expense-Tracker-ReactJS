{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/IncomeExpense.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","color","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpense","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","key","ids","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6adf02a2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <h2 >\r\n\r\n            <div ><u> <p style={{color: \"#e7b3b3\",}}>Expense Tracker </p> </u>\r\n\r\n\r\n\r\n            </div>\r\n            \r\n        </h2>\r\n    )\r\n}\r\n\r\n\r\n","import { getDefaultNormalizer } from \"@testing-library/react\"\r\n\r\nexport default (state, action) => {\r\n\r\n    switch(action.type){\r\n\r\n        case 'DELETE_TRANSACTION':\r\n            return{\r\n\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\r\n            }\r\n\r\n            case 'ADD_TRANSACTION':\r\n                return {\r\n\r\n                    ...state,\r\n                    transactions:[action.payload,...state.transactions]\r\n\r\n                }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n\r\n}","import React, { createContext, useReducer} from 'react'\r\n\r\nimport AppReducer from './AppReducer';\r\n\r\n// Initial State\r\nconst initialState ={\r\n\r\n    transactions:  []\r\n\r\n}\r\n\r\n// Create Context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n\r\n// Provider cpmponent\r\n\r\nexport const GlobalProvider =({children}) => {\r\n\r\n    const[state, dispatch] = useReducer(AppReducer , initialState);\r\n\r\n    //Actions\r\n\r\n    function deleteTransaction(id){\r\n\r\n        dispatch({\r\n\r\n            type: 'DELETE_TRANSACTION',\r\n            payload: id\r\n\r\n\r\n        });\r\n\r\n\r\n    }\r\n\r\n    function addTransaction(transaction){\r\n\r\n        dispatch({\r\n\r\n            type: 'ADD_TRANSACTION',\r\n            payload: transaction\r\n\r\n\r\n        });\r\n\r\n\r\n    }\r\n    return ( <GlobalContext.Provider value={{\r\n        transactions: state.transactions,\r\n        deleteTransaction, addTransaction\r\n    }}>\r\n\r\n        {children}\r\n\r\n    </GlobalContext.Provider>);\r\n\r\n}","import React, {useContext} from 'react'\r\n\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\n\r\nexport const Balance = () => {\r\n\r\n    const { transactions } = useContext(GlobalContext); \r\n\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n        <h4> Your Balance </h4>\r\n        <h1 > Tk {total} </h1>\r\n \r\n\r\n        </>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\n\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\n\r\nexport const IncomeExpense = () => {\r\n\r\n    const { transactions } = useContext(GlobalContext); \r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n    const income = amounts\r\n    .filter(item => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n\r\n  const expense = (\r\n    amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\r\n    -1\r\n  ).toFixed(2);\r\n    return (\r\n\r\n        <div className=\"inc-exp-container\">\r\n            <div>\r\n\r\n                <h4> Income </h4>  \r\n    <p  className=\"money plus\"> {income}</p>  \r\n\r\n\r\n\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <h4>Expense</h4>\r\n    <p  className=\"money minus\"> {expense}</p>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\n\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const Transaction = ({transaction}) => {\r\n\r\n    const {deleteTransaction} = useContext(GlobalContext);\r\n\r\n    const sign = transaction.amount < 0 ? '-' : '+'\r\n    return (\r\n        <li className={transaction.amount <0 ? 'minus' : 'plus'}>\r\n                    \r\n                    {transaction.text} <span> {sign}Tk {Math.abs(transaction.amount)}</span> \r\n                    <button onClick={() => deleteTransaction(transaction.id)} className= \"delete-btn\" > x </button>\r\n\r\n                </li>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\n\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nimport {Transaction} from './Transaction'\r\n\r\nexport const TransactionList = () => {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    \r\n    return (\r\n        <>\r\n\r\n            <h3> History </h3>\r\n            <ul  className=\"list\">\r\n\r\n                {transactions.map( transaction => (  <Transaction key={transaction.ids} transaction={transaction} />))}\r\n                \r\n\r\n                \r\n            </ul>   \r\n\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useContext} from 'react'\r\n\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const AddTransaction = () => {\r\n\r\n    const [text, setText] = useState(\"\")\r\n    const [amount, setAmount] = useState(0);\r\n\r\n    const {addTransaction} = useContext(GlobalContext);\r\n\r\n    const onSubmit = (e) =>{\r\n\r\n        e.preventDefault();\r\n\r\n        const newTransaction = {\r\n\r\n            id: Math.floor(Math.random() * 100000000),\r\n            text: text,\r\n            amount: +amount //to convert it number from string\r\n        }\r\n\r\n        addTransaction(newTransaction);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            \r\n            <h3>Add new transaction</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-control\">\r\n\r\n          <label htmlFor=\"text\">Text</label>\r\n\r\n          <input type=\"text\" value={text} onChange={(e) => setText(e.target.value\r\n           ) } placeholder=\"Enter text...\" / >\r\n\r\n\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"amount\"\r\n           > <h3 >Amount: </h3> <br />\r\n            <div style={{color: \"#83e85a\"}}>(use positive sign (+) for income & negative sign (-) for expense) </div></label\r\n          >\r\n          <input type=\"number\"  onChange={(e) =>setAmount(e.target.value)} placeholder=\"Enter amount with (+/-)...\" />\r\n        </div>\r\n        <button className=\"btn\"> <b style={{color: \"black\"}}>Add transaction </b></button>\r\n      </form>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\n\nimport {Header} from './components/Header'\n\nimport './App.css';\n\nimport {Balance} from './components/Balance'\n\nimport {IncomeExpense} from './components/IncomeExpense'\n\nimport {TransactionList} from './components/TransactionList'\n\nimport {AddTransaction} from './components/AddTransaction'\n\nimport { GlobalProvider, GlobalContext} from './context/GlobalState';\n\nfunction App() {\n  return (\n    <GlobalProvider >\n      \n       <Header/>\n\n      <div className= \"container\">\n\n        <Balance/>\n        <IncomeExpense/>\n        <TransactionList/>\n        <AddTransaction/>\n        \n      </div>\n       \n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}